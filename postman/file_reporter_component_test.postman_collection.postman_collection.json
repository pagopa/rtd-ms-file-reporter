{
	"info": {
		"_postman_id": "bc8e8e50-f0d9-4419-8a88-a87591e1e131",
		"name": "File Reporter Micro-service component test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20034811"
	},
	"item": [
		{
			"name": "000 - Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('000 - Healthcheck', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(pm.variables.get(\"up_actuator_message\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{actuator_healthcheck_url}}",
					"host": [
						"{{base_url}}{{actuator_healthcheck_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001a - PUT RECEIVED event",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001a - PUT RECEIVED event', () => {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"file_report_url\") +'?'+ pm.variables.get(\"sender_codes_parametrs\")+\"=\"+ pm.variables.get(\"sender_code_test_1\"),",
							"        method: \"GET\"",
							"    },  function (err, res) {",
							"            var jsonData = res.json();",
							"            pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name\"));",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{RECEIVED_status}}\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001b - PUT DECRYPTED event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001b - PUT DECRYPTED event', () => {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"file_report_url\") +'?'+ pm.variables.get(\"sender_codes_parametrs\")+\"=\"+ pm.variables.get(\"sender_code_test_1\"),",
							"        method: \"GET\"",
							"    },  function (err, res) {",
							"            var jsonData = res.json();",
							"            pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name\"));",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{DECRYPTED_status}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001c - PUT SENT_TO_ADE event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001c - PUT SENT_TO_ADE event', () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"file_report_url\") +'?'+ pm.variables.get(\"sender_codes_parametrs\")+\"=\"+ pm.variables.get(\"sender_code_test_1\"),",
							"        method: \"GET\"",
							"    },  function (err, res) {",
							"            var jsonData = res.json();",
							"            pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name\"));",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{SENT_TO_ADE_status}}\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001d - PUT RECEIVED event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001d - PUT RECEIVED event', () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"file_report_url\") +'?'+ pm.variables.get(\"sender_codes_parametrs\")+\"=\"+ pm.variables.get(\"sender_code_test_1\"),",
							"        method: \"GET\"",
							"    },  function (err, res) {",
							"            var jsonData = res.json();",
							"            pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name\"));",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{RECEIVED_status}}\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001e - PUT ACK_TO_DOWNLOAD event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001e - PUT ACK_TO_DOWNLOAD event', () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{ACK_TO_DOWNLOAD_status}}\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001f - PUT ACK_DOWNLOADED event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001f - PUT ACK_DOWNLOADED event', () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n    \"sender\": \"{{sender_code_test_1}}\",\n    \"size\": {{size_test}},\n    \"receiveTimestamp\": \"{{now}}\",\n    \"status\": \"{{ACK_DOWNLOADED_status}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001g - Fail PUT DECRYPTED_FAILED event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001g - Fail PUT DECRYPTED_FAILED event', () => {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n  \"sender\": \"{{sender_code_test_1}}\",\n  \"size\": {{size_test}},\n  \"receiveTimestamp\": \"{{now}}\",\n  \"status\": \"{{DECRYPTED_FAILED_status}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "001h - Fail PUT SENT_TO_ADE_FAILED event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('001h - Fail PUT SENT_TO_ADE_FAILED event', () => {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fileName\": \"{{current_file_name}}\",\n  \"sender\": \"{{sender_code_test_1}}\",\n  \"size\": {{size_test}},\n  \"receiveTimestamp\": \"{{now}}\",\n  \"status\": \"{{SENT_TO_ADE_FAILED_status}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}{{consume_event_url}}",
					"host": [
						"{{base_url}}{{consume_event_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "002a - GET File report",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('002a - GET File report', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name1','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')",
							"",
							"pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"        method: \"PUT\",",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                \"fileName\": pm.variables.get(\"current_file_name1\"),",
							"                \"sender\": pm.variables.get(\"sender_code_test_1\"),",
							"                \"size\": pm.variables.get(\"size_test\"),",
							"                \"receiveTimestamp\": date,",
							"                \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"            }),",
							"        }",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{file_report_url}}?senderCodes=12345",
					"host": [
						"{{base_url}}{{file_report_url}}"
					],
					"query": [
						{
							"key": "senderCodes",
							"value": "12345"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "002b - GET empty file report for no sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('002b - GET empty file report for no sende', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.filesRecentlyUploaded).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{file_report_url}}?{{sender_codes_parametrs}}=",
					"host": [
						"{{base_url}}{{file_report_url}}"
					],
					"query": [
						{
							"key": "{{sender_codes_parametrs}}",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "002c - GET empty file report for old date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"        method: \"PUT\",",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                \"fileName\": pm.variables.get(\"past_file_name1\"),",
							"                \"sender\": pm.variables.get(\"sender_code_test_3\"),",
							"                \"size\": pm.variables.get(\"size_test\"),",
							"                \"receiveTimestamp\": \"2020-01-01T00:00:00.000\",",
							"                \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"            }),",
							"        }",
							"    });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('002c - GET empty file report for old date', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.filesRecentlyUploaded).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{file_report_url}}?{{sender_codes_parametrs}}={{sender_code_test_3}}",
					"host": [
						"{{base_url}}{{file_report_url}}"
					],
					"query": [
						{
							"key": "{{sender_codes_parametrs}}",
							"value": "{{sender_code_test_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "002d - GET file report for both sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('002d - GET file report for both sender', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name1\"));",
							"    pm.expect(JSON.stringify(jsonData.filesRecentlyUploaded)).contains(pm.variables.get(\"current_file_name2\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp = Date.now();",
							"",
							"// Convert the timestamp to a formatted date string",
							"var date = new Date(timestamp).toISOString();",
							"",
							"var year = date.substring(0, 4);",
							"var month = date.substring(5, 7);",
							"var day = date.substring(8, 10);",
							"var hour = date.substring(11, 13);",
							"var minute = date.substring(14, 16);",
							"var second = date.substring(17, 19);",
							"",
							"var formattedDate = year + month + day + '.' + hour + minute + second;",
							"",
							"pm.variables.set('now', date);",
							"",
							"pm.variables.set('current_file_name1','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')",
							"pm.variables.set('current_file_name2','ADE.'+ pm.variables.get('sender_code_test_2') +'.TRNLOG.'+ formattedDate +'.001.01.csv.pgp')",
							"",
							"pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"        method: \"PUT\",",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                \"fileName\": pm.variables.get(\"current_file_name1\"),",
							"                \"sender\": pm.variables.get(\"sender_code_test_1\"),",
							"                \"size\": pm.variables.get(\"size_test\"),",
							"                \"receiveTimestamp\": date,",
							"                \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"            }),",
							"        }",
							"    });",
							"",
							"pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"        method: \"PUT\",",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                \"fileName\": pm.variables.get(\"current_file_name2\"),",
							"                \"sender\": pm.variables.get(\"sender_code_test_2\"),",
							"                \"size\": pm.variables.get(\"size_test\"),",
							"                \"receiveTimestamp\": date,",
							"                \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"            }),",
							"        }",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{file_report_url}}?{{sender_codes_parametrs}}={{sender_code_test_1}},{{sender_code_test_2}}",
					"host": [
						"{{base_url}}{{file_report_url}}"
					],
					"query": [
						{
							"key": "{{sender_codes_parametrs}}",
							"value": "{{sender_code_test_1}},{{sender_code_test_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "002e - GET file report in most recent order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current timestamp",
							"var timestamp1 = Date.now();",
							"// Convert the timestamp to a formatted date string",
							"var date1 = new Date(timestamp1).toISOString();",
							"",
							"var timestamp2",
							"var date2",
							"",
							"// Get the current timestamp",
							"timestamp2 = Date.now()+1000;",
							"",
							"// Convert the timestamp to a formatted date string",
							"date2 = new Date(timestamp2).toISOString();",
							"",
							"var year = date1.substring(0, 4);",
							"var month = date1.substring(5, 7);",
							"var day = date1.substring(8, 10);",
							"var hour = date1.substring(11, 13);",
							"var minute = date1.substring(14, 16);",
							"var second1 = date1.substring(17, 19);",
							"var second2 = date2.substring(17, 19);",
							"",
							"var formattedDate1 = year + month + day + '.' + hour + minute + second1;",
							"var formattedDate2 = year + month + day + '.' + hour + minute + second2;",
							"",
							"pm.variables.set('current_file_name1','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate1 +'.001.01.csv.pgp')",
							"pm.variables.set('current_file_name2','ADE.'+ pm.variables.get('sender_code_test_1') +'.TRNLOG.'+ formattedDate2 +'.001.01.csv.pgp')",
							"",
							"pm.sendRequest({",
							"        url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"        method: \"PUT\",",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                \"fileName\": pm.variables.get(\"current_file_name2\"),",
							"                \"sender\": pm.variables.get(\"sender_code_test_1\"),",
							"                \"size\": pm.variables.get(\"size_test\"),",
							"                \"receiveTimestamp\": date2,",
							"                \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"            }),",
							"        }",
							"    },",
							"    function () {",
							"        pm.sendRequest({",
							"                url: pm.variables.get(\"base_url\") + pm.variables.get(\"consume_event_url\"),",
							"                method: \"PUT\",",
							"                header: {",
							"                    \"Content-Type\": \"application/json\"",
							"                },",
							"                body: {",
							"                    mode: \"raw\",",
							"                    raw: JSON.stringify({",
							"                        \"fileName\": pm.variables.get(\"current_file_name1\"),",
							"                        \"sender\": pm.variables.get(\"sender_code_test_1\"),",
							"                        \"size\": pm.variables.get(\"size_test\"),",
							"                        \"receiveTimestamp\": date1,",
							"                        \"status\": pm.variables.get(\"DECRYPTED_status\")",
							"                    }),",
							"                }",
							"        })",
							"    });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('002e - GET file report in most recent order', () => {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData)",
							"    pm.expect(jsonData.filesRecentlyUploaded[0].name).eql(pm.variables.get(\"current_file_name2\"));",
							"    pm.expect(jsonData.filesRecentlyUploaded[1].name).eql(pm.variables.get(\"current_file_name1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}{{file_report_url}}?{{sender_codes_parametrs}}={{sender_code_test_1}}",
					"host": [
						"{{base_url}}{{file_report_url}}"
					],
					"query": [
						{
							"key": "{{sender_codes_parametrs}}",
							"value": "{{sender_code_test_1}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"key": "file_report_url",
			"value": "/file-report",
			"type": "default"
		},
		{
			"key": "sender_codes_parametrs",
			"value": "senderCodes",
			"type": "string"
		},
		{
			"key": "sender_code_test_1",
			"value": "12345",
			"type": "default"
		},
		{
			"key": "sender_code_test_2",
			"value": "54321",
			"type": "string"
		},
		{
			"key": "sender_code_test_3",
			"value": "99999",
			"type": "string"
		},
		{
			"key": "up_actuator_message",
			"value": "UP",
			"type": "string"
		},
		{
			"key": "consume_event_url",
			"value": "/consume-event",
			"type": "string"
		},
		{
			"key": "file_name1",
			"value": "ADE.12345.TRNLOG.20221212.113159.001.01.csv.pgp",
			"type": "string"
		},
		{
			"key": "file_name2",
			"value": "ADE.54321.TRNLOG.20221212.113159.001.01.csv.pgp",
			"type": "string"
		},
		{
			"key": "RECEIVED_status",
			"value": "RECEIVED",
			"type": "string"
		},
		{
			"key": "DECRYPTED_status",
			"value": "DECRYPTED",
			"type": "string"
		},
		{
			"key": "SENT_TO_ADE_status",
			"value": "SENT_TO_ADE",
			"type": "string"
		},
		{
			"key": "RECEIVED_status_in_report",
			"value": "RECEIVED_BY_PAGOPA",
			"type": "string"
		},
		{
			"key": "DECRYPTED_status_in_report",
			"value": "VALIDATED_BY_PAGOPA",
			"type": "string"
		},
		{
			"key": "SENT_TO_ADE_status_in_report",
			"value": "SENT_TO_AGENZIA_DELLE_ENTRATE",
			"type": "string"
		},
		{
			"key": "size_test",
			"value": "987",
			"type": "string"
		},
		{
			"key": "DECRYPTED_FAILED_status",
			"value": "DECRYPTED_FAILED",
			"type": "string"
		},
		{
			"key": "SENT_TO_ADE_FAILED_status",
			"value": "SENT_TO_ADE_FAILED",
			"type": "string"
		},
		{
			"key": "ACK_TO_DOWNLOAD_status",
			"value": "ACK_TO_DOWNLOAD",
			"type": "string"
		},
		{
			"key": "ACK_DOWNLOADED_status",
			"value": "ACK_DOWNLOADED",
			"type": "string"
		},
		{
			"key": "actuator_healthcheck_url",
			"value": "/actuator/health",
			"type": "string"
		},
		{
			"key": "past_file_name1",
			"value": "ADE.9999.TRNLOG.20200101.010100.001.01.csv.pgp",
			"type": "string"
		}
	]
}
